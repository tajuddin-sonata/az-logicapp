{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "CallWFConfigure": {
        "type": "Http",
        "inputs": {
          "uri": "$CONFIGURE_FUNC_URL",
          "method": "POST",
          "body": "@outputs('InputForWFConfigure')"
        },
        "runAfter": {
          "InputForWFConfigure": [
            "SUCCEEDED"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        }
      },
      "CopyBlobToStagingContainer": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "sourceContainerName": "@outputs('context1')?['trigger_file']['bucket_name']",
            "sourceBlobName": "@outputs('context1')?['trigger_file']['full_path']",
            "destinationContainerName": "@outputs('buckets')?['staging']",
            "destinationBlobName": "@{outputs('staging_config')?['folder_path']}/@{outputs('staging_config')?['file_prefix']}_@{outputs('context1')?['trigger_file']['name']}",
            "overrideIfExists": true
          },
          "serviceProviderConfiguration": {
            "connectionName": "AzureBlob",
            "operationId": "copyBlob",
            "serviceProviderId": "/serviceProviders/AzureBlob"
          }
        },
        "runAfter": {
          "content_config": [
            "SUCCEEDED"
          ]
        }
      },
      "For_each": {
        "type": "Foreach",
        "foreach": "@outputs('List_all_the_blobs_using_path')?['body']['blobs']",
        "actions": {
          "Delete_a_blob": {
            "type": "ServiceProvider",
            "inputs": {
              "parameters": {
                "containerName": "@outputs('staging_config')?['bucket_name']",
                "blobName": "@outputs('StagingBlobName')?['BlobName']"
              },
              "serviceProviderConfiguration": {
                "connectionName": "AzureBlob",
                "operationId": "deleteBlob",
                "serviceProviderId": "/serviceProviders/AzureBlob"
              }
            },
            "runAfter": {
              "StagingBlobName": [
                "SUCCEEDED"
              ]
            }
          },
          "StagingBlobName": {
            "type": "Compose",
            "inputs": {
              "BlobName": "@items('For_each')?['name']"
            }
          }
        },
        "runAfter": {
          "List_all_the_blobs_using_path": [
            "SUCCEEDED"
          ]
        }
      },
      "GetLandingContainerMetadata": {
        "type": "Compose",
        "inputs": {
          "client_id": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_client']))",
          "step": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_step']))",
          "type": "@toLower(concat(outputs('HTTPRequestForMetadata')?['headers']['x-ms-meta-ci_media_type']))"
        },
        "runAfter": {
          "HTTPRequestForMetadata": [
            "SUCCEEDED"
          ]
        }
      },
      "HTTPRequestForMetadata": {
        "type": "Http",
        "inputs": {
          "uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('LandingFileData')?['landingcontainername']}?restype=container&comp=metadata",
          "method": "GET",
          "headers": {
            "x-ms-blob-type": "BlockBlob",
            "x-ms-date": "@{formatDateTime(utcNow(),'r')}",
            "x-ms-version": "2019-02-02"
          },
          "authentication": {
            "audience": "https://storage.azure.com",
            "type": "ManagedServiceIdentity"
          }
        },
        "runAfter": {
          "LandingFileData": [
            "SUCCEEDED"
          ]
        },
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        }
      },
      "If-CI_REDACT-true": {
        "type": "If",
        "expression": {
          "or": [
            {
              "equals": [
                "@outputs('config')?['redact']['CI_REDACT']",
                true
              ]
            }
          ]
        },
        "actions": {
          "CallWFRedact": {
            "type": "Http",
            "inputs": {
              "uri": "$REDACT_FUNC_URL",
              "method": "POST",
              "body": "@outputs('InputForRedact')"
            },
            "runAfter": {
              "InputForRedact": [
                "SUCCEEDED"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            }
          },
          "IfAudioInWorkingFile": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files10')",
                    "audio"
                  ]
                }
              ]
            },
            "actions": {
              "redactaudioinput": {
                "type": "Compose",
                "inputs": {
                  "audio": "@outputs('tempredactaudioinput')"
                },
                "runAfter": {
                  "tempredactaudioinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempredactaudioinput": {
                "type": "Compose",
                "inputs": {
                  "bucket_name": "@outputs('working_files10')?['audio']['bucket']",
                  "full_path": "@outputs('working_files10')?['audio']['object']",
                  "version": "@outputs('working_files10')?['audio']['generation']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "redaction_input_files-nlp-transcript": [
                "SUCCEEDED"
              ]
            }
          },
          "IfVideoInWorkingFile": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files10')",
                    "video"
                  ]
                }
              ]
            },
            "actions": {
              "redactvideoinput": {
                "type": "Compose",
                "inputs": {
                  "video": "@outputs('tempredactaudioinput')"
                },
                "runAfter": {
                  "tempredactvideoinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempredactvideoinput": {
                "type": "Compose",
                "inputs": {
                  "bucket_name": "@outputs('working_files10')?['audio']['bucket']",
                  "full_path": "@outputs('working_files10')?['audio']['object']",
                  "version": "@outputs('working_files10')?['audio']['generation']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "redaction_input_files.audio": [
                "SUCCEEDED"
              ]
            }
          },
          "If_redacted_audio": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFRedact')?['staged_files']",
                    "redacted_audio"
                  ]
                }
              ]
            },
            "actions": {
              "staged_redacted_audio_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFRedact')?['staged_files']['redacted_audio']['bucket_name']",
                  "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_audio']['version'])",
                  "object": "@body('CallWFRedact')?['staged_files']['redacted_audio']['full_path']",
                  "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_audio']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFRedact": [
                "SUCCEEDED"
              ]
            }
          },
          "If_redacted_nlp": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFRedact')?['staged_files']",
                    "redacted_nlp"
                  ]
                }
              ]
            },
            "actions": {
              "staged_redacted_nlp_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['bucket_name']",
                  "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_nlp']['version'])",
                  "object": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['full_path']",
                  "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_nlp']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFRedact": [
                "SUCCEEDED"
              ]
            }
          },
          "If_redacted_transcript": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFRedact')?['staged_files']",
                    "redacted_transcript"
                  ]
                }
              ]
            },
            "actions": {
              "staged_redacted_transcript_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['bucket_name']",
                  "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_transcript']['version'])",
                  "object": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['full_path']",
                  "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_transcript']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFRedact": [
                "SUCCEEDED"
              ]
            }
          },
          "If_redacted_video": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFRedact')?['staged_files']",
                    "redacted_video"
                  ]
                }
              ]
            },
            "actions": {
              "staged_redacted_video_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFRedact')?['staged_files']['redacted_video']['bucket_name']",
                  "generation": "@json(body('CallWFRedact')?['staged_files']['redacted_video']['version'])",
                  "object": "@body('CallWFRedact')?['staged_files']['redacted_video']['full_path']",
                  "uploaded_at": "@body('CallWFRedact')?['staged_files']['redacted_video']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFRedact": [
                "SUCCEEDED"
              ]
            }
          },
          "InputForRedact": {
            "type": "Compose",
            "inputs": {
              "context": "@outputs('context1')",
              "function_config": {
                "redact_config": {
                  "types_to_redact": "@if(contains(outputs('config')?['redact']['CI_REDACT_OPTIONS'],'types_to_redact'),outputs('config')['redact']['CI_REDACT_OPTIONS']['types_to_redact'],'[]')"
                },
                "signing_account": "@outputs('config')?['redact']['CI_SA_EMAIL']"
              },
              "input_files": "@outputs('redaction_input_files')",
              "staging_config": "@outputs('staging_config')"
            },
            "runAfter": {
              "redaction_input_files": [
                "SUCCEEDED"
              ]
            }
          },
          "audio_tempfile1": {
            "type": "Compose",
            "inputs": {
              "audio": "@outputs('staged_redacted_audio_obj')"
            },
            "runAfter": {
              "redacted_audio_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "nlp_tempfile1": {
            "type": "Compose",
            "inputs": {
              "nlp": "@outputs('staged_redacted_nlp_obj')"
            },
            "runAfter": {
              "redacted_nlp_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "redacted_audio_tempfile1": {
            "type": "Compose",
            "inputs": {
              "redacted_audio": "@outputs('staged_redacted_audio_obj')"
            },
            "runAfter": {
              "If_redacted_audio": [
                "SUCCEEDED"
              ]
            }
          },
          "redacted_nlp_tempfile1": {
            "type": "Compose",
            "inputs": {
              "redacted_nlp": "@outputs('staged_redacted_nlp_obj')"
            },
            "runAfter": {
              "If_redacted_nlp": [
                "SUCCEEDED"
              ]
            }
          },
          "redacted_transcript_tempfile1": {
            "type": "Compose",
            "inputs": {
              "redacted_transcript": "@outputs('staged_redacted_transcript_obj')"
            },
            "runAfter": {
              "If_redacted_transcript": [
                "SUCCEEDED"
              ]
            }
          },
          "redacted_video_tempfile1": {
            "type": "Compose",
            "inputs": {
              "redacted_video": "@outputs('staged_redacted_video_obj')"
            },
            "runAfter": {
              "If_redacted_video": [
                "SUCCEEDED"
              ]
            }
          },
          "redaction_input_files": {
            "type": "Compose",
            "inputs": "@removeProperty(union(outputs('redaction_input_files-nlp-transcript'),outputs('redaction_input_files.audio'),outputs('redaction_input_files.video')),'tempfile')",
            "runAfter": {
              "redaction_input_files.video": [
                "SUCCEEDED"
              ]
            }
          },
          "redaction_input_files-nlp-transcript": {
            "type": "Compose",
            "inputs": {
              "nlp": {
                "bucket_name": "@outputs('working_files10')?['nlp']['bucket']",
                "full_path": "@outputs('working_files10')?['nlp']['object']",
                "version": "@outputs('working_files10')?['nlp']['generation']"
              },
              "transcript": {
                "bucket_name": "@outputs('working_files10')?['transcript']['bucket']",
                "full_path": "@outputs('working_files10')?['transcript']['object']",
                "version": "@outputs('working_files10')?['transcript']['generation']"
              }
            }
          },
          "redaction_input_files.audio": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redactaudioinput')?['audio'],null),outputs('tempfile'),outputs('redactaudioinput'))",
            "runAfter": {
              "IfAudioInWorkingFile": [
                "SUCCEEDED"
              ]
            }
          },
          "redaction_input_files.video": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redactvideoinput')?['video'],null),outputs('tempfile'),outputs('redactvideoinput'))",
            "runAfter": {
              "IfVideoInWorkingFile": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files12": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redacted_transcript_tempfile1')?['redacted_transcript'],null),outputs('tempfile'),outputs('redacted_transcript_tempfile1'))",
            "runAfter": {
              "transcript_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files13": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redacted_nlp_tempfile1')?['redacted_nlp'],null),outputs('tempfile'),outputs('redacted_nlp_tempfile1'))",
            "runAfter": {
              "nlp_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files14": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redacted_audio_tempfile1')?['redacted_audio'],null),outputs('tempfile'),outputs('redacted_audio_tempfile1'))",
            "runAfter": {
              "audio_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files15": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('redacted_video_tempfile1')?['redacted_video'],null),outputs('tempfile'),outputs('redacted_video_tempfile1'))",
            "runAfter": {
              "video_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "transcript_tempfile1": {
            "type": "Compose",
            "inputs": {
              "transcript": "@outputs('staged_redacted_transcript_obj')"
            },
            "runAfter": {
              "redacted_transcript_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "video_tempfile1": {
            "type": "Compose",
            "inputs": {
              "video": "@outputs('staged_redacted_video_obj')"
            },
            "runAfter": {
              "redacted_video_tempfile1": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files11": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('transcript_tempfile1')?['transcript'],null),outputs('tempfile'),outputs('transcript_tempfile1'))",
            "runAfter": {
              "staged_files12": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files12": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('nlp_tempfile1')?['nlp'],null),outputs('tempfile'),outputs('nlp_tempfile1'))",
            "runAfter": {
              "staged_files13": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files13": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('audio_tempfile1')?['audio'],null),outputs('tempfile'),outputs('audio_tempfile1'))",
            "runAfter": {
              "staged_files14": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files14": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('video_tempfile1')?['video'],null),outputs('tempfile'),outputs('video_tempfile1'))",
            "runAfter": {
              "staged_files15": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "else": {
          "actions": {}
        },
        "runAfter": {
          "working_files10": [
            "SUCCEEDED"
          ]
        }
      },
      "IfTypeAudioVideoTranscript": {
        "type": "If",
        "expression": {
          "or": [
            {
              "equals": [
                "@outputs('context1')?['type']",
                "audio"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "video"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "chat"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "transcript"
              ]
            }
          ]
        },
        "actions": {
          "IfTypeAudio": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "audio"
                  ]
                }
              ]
            },
            "actions": {
              "workingfileaudio": {
                "type": "Compose",
                "inputs": {
                  "audio": "@outputs('staged_media_obj')"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfTypeChatOrTranscript": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "chat"
                  ]
                },
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "transcript"
                  ]
                }
              ]
            },
            "actions": {
              "workingfiletranscript": {
                "type": "Compose",
                "inputs": {
                  "transcript": "@outputs('staged_media_obj')"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfTypeVideo": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "video"
                  ]
                }
              ]
            },
            "actions": {
              "workingfilevideo": {
                "type": "Compose",
                "inputs": {
                  "video": "@outputs('staged_media_obj')"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "ifaudiotype": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('workingfileaudio'),null),outputs('tempfile'),outputs('workingfileaudio'))",
            "runAfter": {
              "IfTypeAudio": [
                "SUCCEEDED"
              ]
            }
          },
          "iftranscripttype": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('workingfiletranscript'),null),outputs('tempfile'),outputs('workingfiletranscript'))",
            "runAfter": {
              "IfTypeChatOrTranscript": [
                "SUCCEEDED"
              ]
            }
          },
          "ifvideotype": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('workingfilevideo'),null),outputs('tempfile'),outputs('workingfilevideo'))",
            "runAfter": {
              "IfTypeVideo": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "else": {
          "actions": {}
        },
        "runAfter": {
          "tempfile": [
            "SUCCEEDED"
          ]
        }
      },
      "If_CI_TRANSCRIPTION_true-Analyse": {
        "type": "If",
        "expression": {
          "or": [
            {
              "equals": [
                "@outputs('config')?['transcribe_media']['CI_TRANSCRIPTION']",
                true
              ]
            }
          ]
        },
        "actions": {
          "CallWFAnalyse": {
            "type": "Http",
            "inputs": {
              "uri": "$ANALYSE_FUNC_URL",
              "method": "POST",
              "body": "@outputs('InputForAnalyse')"
            },
            "runAfter": {
              "InputForAnalyse": [
                "SUCCEEDED"
              ]
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            }
          },
          "If-metrics": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFAnalyse')?['staged_files']",
                    "metrics"
                  ]
                }
              ]
            },
            "actions": {
              "staged_metrics_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFAnalyse')?['staged_files']['metrics']['bucket_name']",
                  "generation": "@json(body('CallWFAnalyse')?['staged_files']['metrics']['version'])",
                  "object": "@body('CallWFAnalyse')?['staged_files']['metrics']['full_path']",
                  "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['metrics']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFAnalyse": [
                "SUCCEEDED"
              ]
            }
          },
          "If-nlp": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFAnalyse')?['staged_files']",
                    "nlp"
                  ]
                }
              ]
            },
            "actions": {
              "staged_nlp_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFAnalyse')?['staged_files']['nlp']['bucket_name']",
                  "generation": "@json(body('CallWFAnalyse')?['staged_files']['nlp']['version'])",
                  "object": "@body('CallWFAnalyse')?['staged_files']['nlp']['full_path']",
                  "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['nlp']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFAnalyse": [
                "SUCCEEDED"
              ]
            }
          },
          "If-spellchecked_transcript": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@body('CallWFAnalyse')?['staged_files']",
                    "spellchecked_transcript"
                  ]
                }
              ]
            },
            "actions": {
              "staged_spellchecked_transcript_obj": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['bucket_name']",
                  "generation": "@json(body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['version'])",
                  "object": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['full_path']",
                  "uploaded_at": "@body('CallWFAnalyse')?['staged_files']['spellchecked_transcript']['uploaded']"
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "CallWFAnalyse": [
                "SUCCEEDED"
              ]
            }
          },
          "InputForAnalyse": {
            "type": "Compose",
            "inputs": {
              "context": "@outputs('context1')",
              "function_config": {
                "nlp_config": {
                  "nlp_ignore": "@outputs('nlp_spellcheck_config')?['nlp_ignore']",
                  "rule_patterns": "@outputs('nlp_spellcheck_config')?['rule_patterns']"
                },
                "spellcheck_config": {
                  "add_words": "@outputs('nlp_spellcheck_config')?['add_words']"
                }
              },
              "input_files": {
                "transcript": {
                  "bucket_name": "@outputs('staged_files7')?['transcript']['bucket']",
                  "full_path": "@outputs('staged_files7')?['transcript']['object']",
                  "version": "@outputs('staged_files7')?['transcript']['generation']"
                }
              },
              "staging_config": "@outputs('staging_config')"
            },
            "runAfter": {
              "nlp_spellcheck_config": [
                "SUCCEEDED"
              ]
            }
          },
          "nlp_spellcheck_config": {
            "type": "Compose",
            "inputs": {
              "add_words": "@if(contains(outputs('config')?['analyse_transcript'],'CI_SPELLCHECK_OPTIONS'),outputs('config')?['analyse_transcript']['CI_SPELLCHECK_OPTIONS']['add_words'],'[]')",
              "nlp_ignore": "@if(contains(outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS'],'nlp_ignore'),outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS']['nlp_ignore'],'[]')",
              "rule_patterns": "@if(contains(outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS'],'rule_patterns'),outputs('config')?['analyse_transcript']['CI_NLP_OPTIONS']['rule_patterns'],'[]')"
            }
          },
          "staged_files10": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempstagedfiles8')?['spellchecked_transcript'],null),outputs('tempfile'),outputs('tempstagedfiles8'))",
            "runAfter": {
              "tempstagedfiles8": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files8": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempstagedfiles6')?['metrics'],null),outputs('tempfile'),outputs('tempstagedfiles6'))",
            "runAfter": {
              "tempstagedfiles6": [
                "SUCCEEDED"
              ]
            }
          },
          "staged_files9": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempstagedfiles7')?['nlp'],null),outputs('tempfile'),outputs('tempstagedfiles7'))",
            "runAfter": {
              "tempstagedfiles7": [
                "SUCCEEDED"
              ]
            }
          },
          "tempstagedfiles6": {
            "type": "Compose",
            "inputs": {
              "metrics": "@outputs('staged_metrics_obj')"
            },
            "runAfter": {
              "If-metrics": [
                "SUCCEEDED"
              ]
            }
          },
          "tempstagedfiles7": {
            "type": "Compose",
            "inputs": {
              "nlp": "@outputs('staged_nlp_obj')"
            },
            "runAfter": {
              "If-nlp": [
                "SUCCEEDED"
              ]
            }
          },
          "tempstagedfiles8": {
            "type": "Compose",
            "inputs": {
              "spellchecked_transcript": "@outputs('staged_spellchecked_transcript_obj')"
            },
            "runAfter": {
              "If-spellchecked_transcript": [
                "SUCCEEDED"
              ]
            }
          },
          "tempworkingfile": {
            "type": "Compose",
            "inputs": {
              "transcript": "@outputs('staged_spellchecked_transcript_obj')"
            },
            "runAfter": {
              "staged_files10": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files7": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempstagedfiles6')?['metrics'],null),outputs('tempfile'),outputs('tempstagedfiles6'))",
            "runAfter": {
              "staged_files8": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files8": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempstagedfiles7')?['nlp'],null),outputs('tempfile'),outputs('tempstagedfiles7'))",
            "runAfter": {
              "staged_files9": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files9": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('tempworkingfile')?['transcript'],null),outputs('tempfile'),outputs('tempworkingfile'))",
            "runAfter": {
              "tempworkingfile": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "else": {
          "actions": {}
        },
        "runAfter": {
          "working_files6": [
            "SUCCEEDED"
          ]
        }
      },
      "InputForWFConfigure": {
        "type": "Compose",
        "inputs": {
          "context": "@outputs('context')",
          "function_config": {
            "config_bucket_name": "@outputs('context')?['config_bucket_name']",
            "functions": "@parameters('INIT-Function')",
            "label_tags": "@parameters('INIT-bucket_label_tags')"
          },
          "input_files": {
            "source_file": {
              "bucket_name": "@{outputs('LandingFileData')?['landingcontainername']}",
              "full_path": "@{outputs('LandingFileData')?['filename']}",
              "uploaded": "@{outputs('LandingFileData')?['event_time']}",
              "version": "@{outputs('LandingFileData')?['version']}"
            }
          }
        },
        "runAfter": {
          "context": [
            "SUCCEEDED"
          ]
        }
      },
      "LandingFileData": {
        "type": "Compose",
        "inputs": {
          "config_bucket_name": "@{split(split(triggerBody()?['subject'],'/')[4],'-')[0]}-@{split(split(triggerBody()?['subject'],'/')[4],'-')[1]}-@{split(split(triggerBody()?['subject'],'/')[4],'-')[2]}",
          "content_type": "@triggerBody()?['data']['contentType']",
          "event_time": "@{triggerBody()?['event_time']}",
          "filename": "@last(split(triggerBody()?['subject'],'/'))",
          "full_path": "@triggerBody()?['subject']",
          "landingcontainername": "@split(triggerBody()?['subject'],'/')[4]",
          "size": "@triggerBody()?['data']['contentLength']",
          "storageaccountname": "@last(split(triggerBody()?['topic'],'/'))",
          "url": "@triggerBody()?['data']['url']",
          "version": "@{triggerBody()?['data']['eTag']}"
        },
        "runAfter": {}
      },
      "List_all_the_blobs_using_path": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "containerName": "@outputs('staging_config')?['bucket_name']",
            "blobNamePrefix": "@{outputs('staging_config')?['folder_path']}/"
          },
          "serviceProviderConfiguration": {
            "connectionName": "AzureBlob",
            "operationId": "listBlobs",
            "serviceProviderId": "/serviceProviders/AzureBlob"
          }
        },
        "runAfter": {
          "staged": [
            "SUCCEEDED"
          ]
        }
      },
      "Send_message_to_Service_Bus": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "entityName": "sitl-content",
            "message": {
              "contentData": "@outputs('encoded_message')"
            }
          },
          "serviceProviderConfiguration": {
            "connectionName": "serviceBus",
            "operationId": "sendMessage",
            "serviceProviderId": "/serviceProviders/serviceBus"
          }
        },
        "runAfter": {
          "encoded_message": [
            "SUCCEEDED"
          ]
        }
      },
      "WorkingFilesData": {
        "type": "If",
        "expression": {
          "or": [
            {
              "not": {
                "equals": [
                  "@outputs('working_files15')",
                  ""
                ]
              }
            }
          ]
        },
        "actions": {
          "IfAudioInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "audio"
                  ]
                }
              ]
            },
            "actions": {
              "CopyAudioBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('audiocopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('audiocopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('audiocopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('audiocopyinput')?['ContentPath']}/audio.@{outputs('audiocopyinput')?['extension']}",
                    "overrideIfExists": true
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "audiocopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "audiocopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['audio']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['audio']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['audio']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['audio']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['audio']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['audio']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['audio']['object'],'/')),'_')),'.'))"
                }
              },
              "tempcontentfile2": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyAudioBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyAudioBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyAudioBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist2": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyAudioBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyAudioBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyAudioBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "audio",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyAudioBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile2": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfMetricsInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "metrics"
                  ]
                }
              ]
            },
            "actions": {
              "CopyMetricsBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('metricscopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('metricscopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('metricscopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('metricscopyinput')?['ContentPath']}/metrics.@{outputs('metricscopyinput')?['extension']}",
                    "overrideIfExists": true
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "metricscopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "metricscopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['metrics']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['metrics']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['metrics']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['metrics']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['metrics']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['metrics']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['metrics']['object'],'/')),'_')),'.'))"
                }
              },
              "tempcontentfile5": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyMetricsBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyMetricsBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyMetricsBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist5": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyMetricsBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyMetricsBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyMetricsBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "metrics",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyMetricsBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile5": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfNLPInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "nlp"
                  ]
                }
              ]
            },
            "actions": {
              "CopyNLPBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('nlpcopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('nlpcopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('nlpcopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('nlpcopyinput')?['ContentPath']}/nlp.@{outputs('nlpcopyinput')?['extension']}",
                    "overrideIfExists": true
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "nlpcopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "nlpcopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['nlp']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['nlp']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['nlp']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['nlp']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['nlp']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['nlp']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['nlp']['object'],'/')),'_')),'.'))"
                }
              },
              "tempcontentfile6": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyNLPBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyNLPBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyNLPBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist6": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyNLPBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyNLPBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyNLPBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "nlp",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyNLPBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile6": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfTranscriptInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "transcript"
                  ]
                }
              ]
            },
            "actions": {
              "CopyTranscriptBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('transcriptcopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('transcriptcopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('transcriptcopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('transcriptcopyinput')?['ContentPath']}/transcript.@{outputs('transcriptcopyinput')?['extension']}"
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "transcriptcopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempcontentfile1": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyTranscriptBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyTranscriptBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist1": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyTranscriptBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "transcript",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyTranscriptBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile1": [
                    "SUCCEEDED"
                  ]
                }
              },
              "transcriptcopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['transcript']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['transcript']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['transcript']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['transcript']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['transcript']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['transcript']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['transcript']['object'],'/')),'_')),'.'))"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfVideoInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "video"
                  ]
                }
              ]
            },
            "actions": {
              "CopyVideoBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('videocopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('videocopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('videocopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('videocopyinput')?['ContentPath']}/video.@{outputs('videocopyinput')?['extension']}",
                    "overrideIfExists": true
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "videocopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempcontentfile3": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyVideoBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyVideoBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyVideoBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist3": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyVideoBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyVideoBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyVideoBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "video",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyVideoBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile3": [
                    "SUCCEEDED"
                  ]
                }
              },
              "videocopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['video']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['video']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['video']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['video']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['video']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['video']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['video']['object'],'/')),'_')),'.'))"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "IfWaveformInWorkingFiles": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "contains": [
                    "@outputs('working_files15')",
                    "waveform"
                  ]
                }
              ]
            },
            "actions": {
              "CopyWaveformBlobFromStagingToContent": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "sourceContainerName": "@outputs('waveformcopyinput')?['StagingContainer']",
                    "sourceBlobName": "@outputs('waveformcopyinput')?['StagingBlobPath']",
                    "destinationContainerName": "@outputs('waveformcopyinput')?['ContentContainer']",
                    "destinationBlobName": "@{outputs('waveformcopyinput')?['ContentPath']}/waveform.@{outputs('waveformcopyinput')?['extension']}",
                    "overrideIfExists": true
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "AzureBlob",
                    "operationId": "copyBlob",
                    "serviceProviderId": "/serviceProviders/AzureBlob"
                  }
                },
                "runAfter": {
                  "waveformcopyinput": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempcontentfile4": {
                "type": "Compose",
                "inputs": {
                  "bucket": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['containerName']",
                  "generation": "@json(outputs('CopyWaveformBlobFromStagingToContent')?['body']['eTag'])",
                  "object": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['blobFullPathWithContainer']",
                  "uploaded_at": "@outputs('CopyWaveformBlobFromStagingToContent')?['body']['creationTime']"
                },
                "runAfter": {
                  "CopyWaveformBlobFromStagingToContent": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempfilelist4": {
                "type": "Compose",
                "inputs": {
                  "file_gen": "@json(outputs('CopyWaveformBlobFromStagingToContent')?['body']['eTag'])",
                  "file_name": "@first(split(last(split(outputs('CopyWaveformBlobFromStagingToContent')?['body']['name'],'/')),'.'))",
                  "file_name_ext": "@last(split(outputs('CopyWaveformBlobFromStagingToContent')?['body']['name'],'/'))",
                  "file_type": "waveform",
                  "file_uri": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net/@{outputs('CopyWaveformBlobFromStagingToContent')?['body']['blobFullPathWithContainer']\n}"
                },
                "runAfter": {
                  "tempcontentfile4": [
                    "SUCCEEDED"
                  ]
                }
              },
              "waveformcopyinput": {
                "type": "Compose",
                "inputs": {
                  "ContentBlobName": "@last(split(last(split(outputs('working_files15')?['waveform']['object'],'/')),'_'))",
                  "ContentBlobNameWithExtension": "@last(split(outputs('working_files15')?['waveform']['object'],'/'))",
                  "ContentContainer": "@outputs('buckets')?['content']",
                  "ContentPath": "@outputs('content_config')?['folder_path']",
                  "StagingBlobName": "@last(split(outputs('working_files15')?['waveform']['object'],'/'))",
                  "StagingBlobPath": "@outputs('working_files15')?['waveform']['object']",
                  "StagingBlobVersion": "@outputs('working_files15')?['waveform']['generation']",
                  "StagingContainer": "@outputs('working_files15')?['waveform']['bucket']",
                  "extension": "@last(split(last(split(last(split(outputs('working_files15')?['waveform']['object'],'/')),'_')),'.'))"
                }
              }
            },
            "else": {
              "actions": {}
            }
          },
          "content_files_audio": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofaudiocopy')?['audio'],null),outputs('tempfile'),outputs('outputofaudiocopy'))",
            "runAfter": {
              "outputofaudiocopy": [
                "SUCCEEDED"
              ]
            }
          },
          "content_files_metrics": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofmetricscopy')?['metrics'],null),outputs('tempfile'),outputs('outputofmetricscopy'))",
            "runAfter": {
              "outputofmetricscopy": [
                "SUCCEEDED"
              ]
            }
          },
          "content_files_nlp": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofnlpcopy')?['nlp'],null),outputs('tempfile'),outputs('outputofnlpcopy'))",
            "runAfter": {
              "outputofnlpcopy": [
                "SUCCEEDED"
              ]
            }
          },
          "content_files_transcript": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputoftranscriptcopy')?['transcript'],null),outputs('tempfile'),outputs('outputoftranscriptcopy'))",
            "runAfter": {
              "outputoftranscriptcopy": [
                "SUCCEEDED"
              ]
            }
          },
          "content_files_video": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofvideocopy')?['video'],null),outputs('tempfile'),outputs('outputofvideocopy'))",
            "runAfter": {
              "outputofvideocopy": [
                "SUCCEEDED"
              ]
            }
          },
          "content_files_waveform": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofwaveformcopy')?['waveform'],null),outputs('tempfile'),outputs('outputofwaveformcopy'))",
            "runAfter": {
              "outputofwaveformcopy": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray1": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputoftranscriptcopy')?['transcript'],null),outputs('tempfilelistarray'),outputs('tempfilelist1'))",
            "runAfter": {
              "content_files_transcript": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray2": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofaudiocopy')?['audio'],null),outputs('tempfilelistarray'),outputs('tempfilelist2'))",
            "runAfter": {
              "content_files_audio": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray3": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofvideocopy')?['video'],null),outputs('tempfilelistarray'),outputs('tempfilelist3'))",
            "runAfter": {
              "content_files_video": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray4": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofwaveformcopy')?['waveform'],null),outputs('tempfilelistarray'),outputs('tempfilelist4'))",
            "runAfter": {
              "content_files_waveform": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray5": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofmetricscopy')?['metrics'],null),outputs('tempfilelistarray'),outputs('tempfilelist5'))",
            "runAfter": {
              "content_files_metrics": [
                "SUCCEEDED"
              ]
            }
          },
          "filelistarray6": {
            "type": "Compose",
            "inputs": "@if(equals(outputs('outputofnlpcopy')?['nlp'],null),outputs('tempfilelistarray'),outputs('tempfilelist6'))",
            "runAfter": {
              "content_files_nlp": [
                "SUCCEEDED"
              ]
            }
          },
          "outputofaudiocopy": {
            "type": "Compose",
            "inputs": {
              "audio": "@outputs('tempcontentfile2')"
            },
            "runAfter": {
              "IfAudioInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          },
          "outputofmetricscopy": {
            "type": "Compose",
            "inputs": {
              "metrics": "@outputs('tempcontentfile5')"
            },
            "runAfter": {
              "IfMetricsInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          },
          "outputofnlpcopy": {
            "type": "Compose",
            "inputs": {
              "nlp": "@outputs('tempcontentfile6')"
            },
            "runAfter": {
              "IfNLPInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          },
          "outputoftranscriptcopy": {
            "type": "Compose",
            "inputs": {
              "transcript": "@outputs('tempcontentfile1')"
            },
            "runAfter": {
              "IfTranscriptInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          },
          "outputofvideocopy": {
            "type": "Compose",
            "inputs": {
              "video": "@outputs('tempcontentfile3')"
            },
            "runAfter": {
              "IfVideoInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          },
          "outputofwaveformcopy": {
            "type": "Compose",
            "inputs": {
              "waveform": "@outputs('tempcontentfile4')"
            },
            "runAfter": {
              "IfWaveformInWorkingFiles": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "else": {
          "actions": {}
        },
        "runAfter": {
          "tempfilelistarray": [
            "SUCCEEDED"
          ]
        }
      },
      "buckets": {
        "type": "Compose",
        "inputs": {
          "content": "@body('CallWFConfigure')?['client_buckets']['content']",
          "landing": "@outputs('context')?['trigger_file']['bucket_name']",
          "staging": "@body('CallWFConfigure')?['client_buckets']['staging']"
        },
        "runAfter": {
          "CallWFConfigure": [
            "SUCCEEDED"
          ]
        }
      },
      "c": {
        "type": "Compose",
        "inputs": {
          "files": "@outputs('files')",
          "media_info": "@outputs('media_info')"
        },
        "runAfter": {
          "files": [
            "SUCCEEDED"
          ]
        }
      },
      "config": {
        "type": "Compose",
        "inputs": "@body('CallWFConfigure')?['client_config']",
        "runAfter": {
          "buckets": [
            "SUCCEEDED"
          ]
        }
      },
      "content": {
        "type": "Compose",
        "inputs": "@outputs('content_files')",
        "runAfter": {
          "Send_message_to_Service_Bus": [
            "SUCCEEDED"
          ]
        }
      },
      "content_config": {
        "type": "Compose",
        "inputs": {
          "bucket_name": "@outputs('buckets')?['content']",
          "folder_path": "@body('CallWFConfigure')?['content_folder_path']"
        },
        "runAfter": {
          "staging_config": [
            "SUCCEEDED"
          ]
        }
      },
      "content_files": {
        "type": "Compose",
        "inputs": "@removeProperty(union(outputs('content_files_audio'),outputs('content_files_video'),outputs('content_files_transcript'),outputs('content_files_waveform'),outputs('content_files_metrics'),outputs('content_files_nlp')),'tempfile')",
        "runAfter": {
          "WorkingFilesData": [
            "SUCCEEDED"
          ]
        }
      },
      "context": {
        "type": "Compose",
        "inputs": {
          "azure_location": "@{replace(toLower(appsetting('REGION_NAME')),' ','')}",
          "azure_subscription": "@split(appsetting('WEBSITE_OWNER_NAME'),'+')[0]",
          "client_id": "@outputs('GetLandingContainerMetadata')?['client_id']",
          "config_bucket_name": "@outputs('LandingFileData')?['config_bucket_name']",
          "execution_id": "@workflow()['run']['name']",
          "execution_start": "@utcNow()",
          "step": "@outputs('GetLandingContainerMetadata')?['step']",
          "storageaccounturl": "https://@{outputs('LandingFileData')?['storageaccountname']}.blob.core.windows.net",
          "trigger_file": {
            "bucket_name": "@outputs('LandingFileData')?['landingcontainername']",
            "content_type": "@outputs('LandingFileData')?['content_type']",
            "full_path": "@outputs('LandingFileData')?['filename']",
            "name": "@outputs('LandingFileData')?['filename']",
            "size": "@outputs('LandingFileData')?['size']",
            "upload_timestamp": "@outputs('LandingFileData')?['event_time']",
            "version": "@outputs('LandingFileData')?['version']"
          },
          "type": "@outputs('GetLandingContainerMetadata')?['type']",
          "workflow_id": "@appsetting('WEBSITE_SITE_NAME')"
        },
        "runAfter": {
          "GetLandingContainerMetadata": [
            "SUCCEEDED"
          ]
        }
      },
      "context.interaction_id": {
        "type": "Compose",
        "inputs": {
          "interaction_id": "@body('CallWFConfigure')?['interaction_id']"
        },
        "runAfter": {
          "config": [
            "SUCCEEDED"
          ]
        }
      },
      "context1": {
        "type": "Compose",
        "inputs": "@union(outputs('context'),outputs('context.interaction_id'))",
        "runAfter": {
          "context.interaction_id": [
            "SUCCEEDED"
          ]
        }
      },
      "encoded_message": {
        "type": "Compose",
        "inputs": "@base64(outputs('raw_message'))",
        "runAfter": {
          "raw_message": [
            "SUCCEEDED"
          ]
        }
      },
      "filelistarray": {
        "type": "Compose",
        "inputs": "@json(replace(concat('[',outputs('filelistarray1'),',',outputs('filelistarray2'),',',outputs('filelistarray3'),',',outputs('filelistarray4'),',',outputs('filelistarray5'),',',outputs('filelistarray6'),',',outputs('tempfilelistarray'),']'),',{}',''))",
        "runAfter": {
          "content_files": [
            "SUCCEEDED"
          ]
        }
      },
      "files": {
        "type": "Compose",
        "inputs": {
          "content": "@outputs('content')",
          "staged": "@outputs('staged')",
          "working": "@outputs('working')"
        },
        "runAfter": {
          "For_each": [
            "SUCCEEDED"
          ]
        }
      },
      "orchestrate_flow-If-Audio-Video-Chat-Transcript": {
        "type": "If",
        "expression": {
          "or": [
            {
              "equals": [
                "@outputs('context1')?['type']",
                "audio"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "video"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "chat"
              ]
            },
            {
              "equals": [
                "@outputs('context1')?['type']",
                "transcript"
              ]
            }
          ]
        },
        "actions": {
          "If_transcribe_media_CI_TRANSCRIPTION_true": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "equals": [
                    "@outputs('config')?['transcribe_media']['CI_TRANSCRIPTION']",
                    true
                  ]
                }
              ]
            },
            "actions": {
              "CallWFTranscribe": {
                "type": "Http",
                "inputs": {
                  "uri": "$TRANSCRIBE_FUNC_URL",
                  "method": "POST",
                  "body": "@outputs('InputForTranscribe')"
                },
                "runAfter": {
                  "InputForTranscribe": [
                    "SUCCEEDED"
                  ]
                },
                "runtimeConfiguration": {
                  "contentTransfer": {
                    "transferMode": "Chunked"
                  }
                }
              },
              "InputForTranscribe": {
                "type": "Compose",
                "inputs": {
                  "context": "@outputs('context1')",
                  "function_config": {
                    "asr_config": "@outputs('asr_config')",
                    "signing_account": "@outputs('config')?['transcode_media']['CI_SA_EMAIL']",
                    "transcript_config": "@outputs('transcript_config')"
                  },
                  "input_files": {
                    "audio": "@outputs('input_file')"
                  },
                  "staging_config": "@outputs('staging_config')"
                },
                "runAfter": {
                  "input_file": [
                    "SUCCEEDED"
                  ]
                }
              },
              "asr_config": {
                "type": "Compose",
                "inputs": {
                  "api_key": "89954365f96e90d5a07fcacacb48bd17601ab3be",
                  "features": "@outputs('set_transcribe_args_asr_config_typed')"
                },
                "runAfter": {
                  "set_transcribe_args_asr_url_query": [
                    "SUCCEEDED"
                  ]
                }
              },
              "audio_input_file": {
                "type": "Compose",
                "inputs": {
                  "bucket_name": "@outputs('staged_files6')?['staged_media']['bucket']",
                  "full_path": "@outputs('staged_files6')?['staged_media']['object']",
                  "version": "@outputs('staged_files6')?['staged_media']['generation']"
                },
                "runAfter": {
                  "transcript_config": [
                    "SUCCEEDED"
                  ]
                }
              },
              "input_file": {
                "type": "Compose",
                "inputs": {
                  "bucket_name": "@if(equals(outputs('temp_audio_input_file')?['bucket_name'],''),outputs('audio_input_file')?['bucket_name'],outputs('temp_audio_input_file')?['bucket_name'])",
                  "full_path": "@if(equals(outputs('temp_audio_input_file')?['full_path'],''),outputs('audio_input_file')?['full_path'],outputs('temp_audio_input_file')?['full_path'])",
                  "version": "@if(equals(outputs('temp_audio_input_file')?['version'],''),outputs('audio_input_file')?['version'],outputs('temp_audio_input_file')?['version'])"
                },
                "runAfter": {
                  "temp_audio_input_file": [
                    "SUCCEEDED"
                  ]
                }
              },
              "set_transcribe_args_asr_config_raw": {
                "type": "Compose",
                "inputs": "@outputs('config')?['transcribe_media']['CI_DEEPGRAM_FEATURES']",
                "runAfter": {
                  "set_transcribe_args_type": [
                    "SUCCEEDED"
                  ]
                }
              },
              "set_transcribe_args_asr_config_typed": {
                "type": "Compose",
                "inputs": "@if(contains(outputs('set_transcribe_args_asr_config_raw'),outputs('set_transcribe_args_type')),outputs('set_transcribe_args_asr_config_raw')?[outputs('set_transcribe_args_type')],outputs('set_transcribe_args_asr_config_raw'))",
                "runAfter": {
                  "set_transcribe_args_asr_config_raw": [
                    "SUCCEEDED"
                  ]
                }
              },
              "set_transcribe_args_asr_url_query": {
                "type": "Compose",
                "inputs": "@if(contains(outputs('config')?['transcribe_media'],'CI_ASR_ENDPOINT_QUERY'),outputs('config')?['transcribe_media']['CI_ASR_ENDPOINT_QUERY'],'/v2')",
                "runAfter": {
                  "set_transcribe_args_asr_config_typed": [
                    "SUCCEEDED"
                  ]
                }
              },
              "set_transcribe_args_type": {
                "type": "Compose",
                "inputs": "@if(greater(outputs('media_info')?['video_streams'], 0), 'video', 'audio')"
              },
              "staged_transcript_obj": {
                "type": "Compose",
                "inputs": {
                  "transcript": {
                    "bucket": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['bucket_name']",
                    "generation": "@json(outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['version'])",
                    "object": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['full_path']",
                    "uploaded_at": "@outputs('CallWFTranscribe')?['body']['staged_files']['transcript']['uploaded']"
                  }
                },
                "runAfter": {
                  "CallWFTranscribe": [
                    "SUCCEEDED"
                  ]
                }
              },
              "temp_audio_input_file": {
                "type": "Compose",
                "inputs": {
                  "bucket_name": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['bucket'])",
                  "full_path": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['object'])",
                  "version": "@if(equals(outputs('staged_files6')?['temp_audio'],null),'',outputs('staged_files6')?['temp_audio']['generation'])"
                },
                "runAfter": {
                  "audio_input_file": [
                    "SUCCEEDED"
                  ]
                }
              },
              "transcript_config": {
                "type": "Compose",
                "inputs": {
                  "channel_map": [
                    "@outputs('transcript_config_typed')?['channel_map']['1']",
                    "@outputs('transcript_config_typed')?['channel_map']['2']"
                  ]
                },
                "runAfter": {
                  "transcript_config_typed": [
                    "SUCCEEDED"
                  ]
                }
              },
              "transcript_config_raw": {
                "type": "Compose",
                "inputs": "@outputs('config')?['transcribe_media']['CI_NORMALISE_OPTIONS']",
                "runAfter": {
                  "asr_config": [
                    "SUCCEEDED"
                  ]
                }
              },
              "transcript_config_typed": {
                "type": "Compose",
                "inputs": "@if(contains(outputs('transcript_config_raw'),outputs('set_transcribe_args_type')),outputs('transcript_config_raw')?[outputs('set_transcribe_args_type')],outputs('transcript_config_raw'))",
                "runAfter": {
                  "transcript_config_raw": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {}
            },
            "runAfter": {
              "working_files5": [
                "SUCCEEDED"
              ]
            }
          },
          "media_flow-If-Audio-Video": {
            "type": "If",
            "expression": {
              "or": [
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "audio"
                  ]
                },
                {
                  "equals": [
                    "@outputs('context1')?['type']",
                    "video"
                  ]
                }
              ]
            },
            "actions": {
              "CallWFTranscode": {
                "type": "Http",
                "inputs": {
                  "uri": "$TRANSCODE_FUNC_URL",
                  "method": "POST",
                  "body": "@outputs('InputForTranscode')"
                },
                "runAfter": {
                  "InputForTranscode": [
                    "SUCCEEDED"
                  ]
                },
                "runtimeConfiguration": {
                  "contentTransfer": {
                    "transferMode": "Chunked"
                  }
                }
              },
              "If_compressed_audio": {
                "type": "If",
                "expression": {
                  "or": [
                    {
                      "contains": [
                        "@body('CallWFTranscode')?['staged_files']",
                        "compressed_audio"
                      ]
                    }
                  ]
                },
                "actions": {
                  "staged_compressed_audio_obj": {
                    "type": "Compose",
                    "inputs": {
                      "bucket": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['bucket_name']",
                      "generation": "@json(body('CallWFTranscode')?['staged_files']['compressed_audio']['version'])",
                      "object": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['full_path']",
                      "uploaded_at": "@body('CallWFTranscode')?['staged_files']['compressed_audio']['uploaded']"
                    }
                  }
                },
                "else": {
                  "actions": {}
                },
                "runAfter": {
                  "media_info": [
                    "SUCCEEDED"
                  ]
                }
              },
              "If_compressed_video": {
                "type": "If",
                "expression": {
                  "or": [
                    {
                      "contains": [
                        "@body('CallWFTranscode')?['staged_files']",
                        "compressed_video"
                      ]
                    }
                  ]
                },
                "actions": {
                  "staged_compressed_video_obj": {
                    "type": "Compose",
                    "inputs": {
                      "bucket": "@body('CallWFTranscode')?['staged_files']['compressed_video']['bucket_name']",
                      "generation": "@json(body('CallWFTranscode')?['staged_files']['compressed_video']['version'])",
                      "object": "@body('CallWFTranscode')?['staged_files']['compressed_video']['full_path']",
                      "uploaded_at": "@body('CallWFTranscode')?['staged_files']['compressed_video']['uploaded']"
                    }
                  }
                },
                "else": {
                  "actions": {}
                },
                "runAfter": {
                  "media_info": [
                    "SUCCEEDED"
                  ]
                }
              },
              "If_temp_audio": {
                "type": "If",
                "expression": {
                  "or": [
                    {
                      "contains": [
                        "@body('CallWFTranscode')?['staged_files']",
                        "temp_audio"
                      ]
                    }
                  ]
                },
                "actions": {
                  "staged_temp_audio_obj": {
                    "type": "Compose",
                    "inputs": {
                      "bucket": "@body('CallWFTranscode')?['staged_files']['temp_audio']['bucket_name']",
                      "generation": "@json(body('CallWFTranscode')?['staged_files']['temp_audio']['version'])",
                      "object": "@body('CallWFTranscode')?['staged_files']['temp_audio']['full_path']",
                      "uploaded_at": "@body('CallWFTranscode')?['staged_files']['temp_audio']['uploaded']"
                    }
                  }
                },
                "else": {
                  "actions": {}
                },
                "runAfter": {
                  "media_info": [
                    "SUCCEEDED"
                  ]
                }
              },
              "If_video_with_added_blank_audio": {
                "type": "If",
                "expression": {
                  "or": [
                    {
                      "contains": [
                        "@body('CallWFTranscode')?['staged_files']",
                        "video_with_added_blank_audio"
                      ]
                    }
                  ]
                },
                "actions": {
                  "staged_video_with_added_blank_audio_obj": {
                    "type": "Compose",
                    "inputs": {
                      "bucket": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['bucket_name']",
                      "generation": "@json(body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['version'])",
                      "object": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['full_path']",
                      "uploaded_at": "@body('CallWFTranscode')?['staged_files']['video_with_added_blank_audio']['uploaded']"
                    }
                  }
                },
                "else": {
                  "actions": {}
                },
                "runAfter": {
                  "media_info": [
                    "SUCCEEDED"
                  ]
                }
              },
              "If_waveform": {
                "type": "If",
                "expression": {
                  "or": [
                    {
                      "contains": [
                        "@body('CallWFTranscode')?['staged_files']",
                        "waveform"
                      ]
                    }
                  ]
                },
                "actions": {
                  "staged_waveform_obj": {
                    "type": "Compose",
                    "inputs": {
                      "bucket": "@body('CallWFTranscode')?['staged_files']['waveform']['bucket_name']",
                      "generation": "@json(body('CallWFTranscode')?['staged_files']['waveform']['version'])",
                      "object": "@body('CallWFTranscode')?['staged_files']['waveform']['full_path']",
                      "uploaded_at": "@body('CallWFTranscode')?['staged_files']['waveform']['uploaded']"
                    }
                  }
                },
                "else": {
                  "actions": {}
                },
                "runAfter": {
                  "media_info": [
                    "SUCCEEDED"
                  ]
                }
              },
              "InputForTranscode": {
                "type": "Compose",
                "inputs": {
                  "context": "@outputs('context1')",
                  "function_config": {
                    "signing_account": "@outputs('config')?['transcode_media']['CI_SA_EMAIL']"
                  },
                  "input_files": {
                    "media": {
                      "bucket_name": "@outputs('staged_files')?['staged_media']['bucket']",
                      "full_path": "@outputs('staged_files')?['staged_media']['object']",
                      "version": "@outputs('staged_files')?['staged_media']['generation']"
                    }
                  },
                  "staging_config": "@outputs('staging_config')"
                }
              },
              "media_info": {
                "type": "Compose",
                "inputs": "@body('CallWFTranscode')?['media_info']",
                "runAfter": {
                  "CallWFTranscode": [
                    "SUCCEEDED"
                  ]
                }
              },
              "staged_files1": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempstagedfiles1')?['compressed_audio'],null),outputs('tempfile'),outputs('tempstagedfiles1'))",
                "runAfter": {
                  "tempstagedfiles1": [
                    "SUCCEEDED"
                  ]
                }
              },
              "staged_files2": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempstagedfiles2')?['waveform'],null),outputs('tempfile'),outputs('tempstagedfiles2'))",
                "runAfter": {
                  "tempstagedfiles2": [
                    "SUCCEEDED"
                  ]
                }
              },
              "staged_files3": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempstagedfiles3')?['video_with_added_blank_audio'],null),outputs('tempfile'),outputs('tempstagedfiles3'))",
                "runAfter": {
                  "tempstagedfiles3": [
                    "SUCCEEDED"
                  ]
                }
              },
              "staged_files4": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempstagedfiles4')?['compressed_video'],null),outputs('tempfile'),outputs('tempstagedfiles4'))",
                "runAfter": {
                  "tempstagedfiles4": [
                    "SUCCEEDED"
                  ]
                }
              },
              "staged_files5": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempstagedfiles5')?['temp_audio'],null),outputs('tempfile'),outputs('tempstagedfiles5'))",
                "runAfter": {
                  "tempstagedfiles5": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempstagedfiles1": {
                "type": "Compose",
                "inputs": {
                  "compressed_audio": "@outputs('staged_compressed_audio_obj')"
                },
                "runAfter": {
                  "If_compressed_audio": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempstagedfiles2": {
                "type": "Compose",
                "inputs": {
                  "waveform": "@outputs('staged_waveform_obj')"
                },
                "runAfter": {
                  "If_waveform": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempstagedfiles3": {
                "type": "Compose",
                "inputs": {
                  "video_with_added_blank_audio": "@outputs('staged_video_with_added_blank_audio_obj')"
                },
                "runAfter": {
                  "If_video_with_added_blank_audio": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempstagedfiles4": {
                "type": "Compose",
                "inputs": {
                  "compressed_video": "@outputs('staged_compressed_video_obj')"
                },
                "runAfter": {
                  "If_compressed_video": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempstagedfiles5": {
                "type": "Compose",
                "inputs": {
                  "temp_audio": "@outputs('staged_temp_audio_obj')"
                },
                "runAfter": {
                  "If_temp_audio": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempworkingfiles1": {
                "type": "Compose",
                "inputs": {
                  "audio": "@outputs('staged_compressed_audio_obj')"
                },
                "runAfter": {
                  "staged_files1": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempworkingfiles2": {
                "type": "Compose",
                "inputs": {
                  "waveform": "@outputs('staged_waveform_obj')"
                },
                "runAfter": {
                  "staged_files2": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempworkingfiles3": {
                "type": "Compose",
                "inputs": {
                  "video": "@outputs('staged_video_with_added_blank_audio_obj')"
                },
                "runAfter": {
                  "staged_files3": [
                    "SUCCEEDED"
                  ]
                }
              },
              "tempworkingfiles4": {
                "type": "Compose",
                "inputs": {
                  "video": "@outputs('staged_compressed_video_obj')"
                },
                "runAfter": {
                  "staged_files4": [
                    "SUCCEEDED"
                  ]
                }
              },
              "working_files1": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempworkingfiles1')?['audio'],null),outputs('tempfile'),outputs('tempworkingfiles1'))",
                "runAfter": {
                  "tempworkingfiles1": [
                    "SUCCEEDED"
                  ]
                }
              },
              "working_files2": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempworkingfiles2')?['waveform'],null),outputs('tempfile'),outputs('tempworkingfiles2'))",
                "runAfter": {
                  "tempworkingfiles2": [
                    "SUCCEEDED"
                  ]
                }
              },
              "working_files3": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempworkingfiles3')?['video'],null),outputs('tempfile'),outputs('tempworkingfiles3'))",
                "runAfter": {
                  "tempworkingfiles3": [
                    "SUCCEEDED"
                  ]
                }
              },
              "working_files4": {
                "type": "Compose",
                "inputs": "@if(equals(outputs('tempworkingfiles4')?['video'],null),outputs('tempfile'),outputs('tempworkingfiles4'))",
                "runAfter": {
                  "tempworkingfiles4": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {
                "If_Chat_Transcript": {
                  "type": "If",
                  "expression": {
                    "or": [
                      {
                        "equals": [
                          "@outputs('context1')?['type']",
                          "chat"
                        ]
                      },
                      {
                        "equals": [
                          "@outputs('context1')?['type']",
                          "transcript"
                        ]
                      }
                    ]
                  },
                  "actions": {},
                  "else": {
                    "actions": {
                      "RasieException": {
                        "type": "Compose",
                        "inputs": "@{outputs('context1')?['type']} not from an accepted landing container type: [audio,video,chat,transcript,metadata]"
                      }
                    }
                  }
                }
              }
            }
          },
          "staged_files6": {
            "type": "Compose",
            "inputs": "@removeProperty(union(outputs('staged_files'),outputs('staged_files1'),outputs('staged_files2'),outputs('staged_files3'),outputs('staged_files4'),outputs('staged_files5')),'tempfile')",
            "runAfter": {
              "media_flow-If-Audio-Video": [
                "SUCCEEDED"
              ]
            }
          },
          "working_files5": {
            "type": "Compose",
            "inputs": "@removeProperty(union(outputs('working_files'),outputs('working_files1'),outputs('working_files2'),outputs('working_files3'),outputs('working_files4')),'tempfile')",
            "runAfter": {
              "staged_files6": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "else": {
          "actions": {
            "If_Metadata": {
              "type": "If",
              "expression": {
                "or": [
                  {
                    "equals": [
                      "@outputs('context1')?['type']",
                      "metadata"
                    ]
                  }
                ]
              },
              "actions": {},
              "else": {
                "actions": {
                  "RaiseAnException": {
                    "type": "Compose",
                    "inputs": "@{outputs('context1')?['type']} not from an accepted landing container type: [audio,video,chat,transcript,metadata]"
                  }
                }
              }
            }
          }
        },
        "runAfter": {
          "staged_files": [
            "SUCCEEDED"
          ]
        }
      },
      "raw_message": {
        "type": "Compose",
        "inputs": {
          "azure_location": "@outputs('context1')?['azure_location']",
          "azure_subscription": "@outputs('context1')?['azure_subscription']",
          "client_id": "@outputs('context1')?['client_id']",
          "config_bucket_name": "@outputs('context1')?['config_bucket_name']",
          "content_files": "@outputs('filelistarray')",
          "execution_id": "@outputs('context1')?['execution_id']",
          "execution_start": "@outputs('context1')?['execution_start']",
          "interaction_id": "@outputs('context1')?['interaction_id']",
          "redact": "@outputs('config')?['redact']['CI_REDACT']",
          "trigger_file_gen": "@outputs('context1')?['trigger_file']['version']",
          "trigger_file_name": "@first(split(outputs('context1')?['trigger_file']['name'],'.'))",
          "trigger_file_name_ext": "@outputs('context1')?['trigger_file']['full_path']",
          "trigger_file_type": "@outputs('context1')?['type']",
          "trigger_file_uploaded": "@outputs('context1')?['trigger_file']['upload_timestamp']",
          "trigger_file_uri": "@outputs('LandingFileData')?['url']"
        },
        "runAfter": {
          "filelistarray": [
            "SUCCEEDED"
          ]
        }
      },
      "staged": {
        "type": "Compose",
        "inputs": "@outputs('staged_files16')",
        "runAfter": {
          "working": [
            "SUCCEEDED"
          ]
        }
      },
      "staged_files": {
        "type": "Compose",
        "inputs": {
          "staged_media": "@outputs('staged_media_obj')"
        },
        "runAfter": {
          "working_files": [
            "SUCCEEDED"
          ]
        }
      },
      "staged_files11": {
        "type": "Compose",
        "inputs": "@removeProperty(if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('staged_files7'),outputs('staged_files8'),outputs('staged_files9'),outputs('staged_files10')),outputs('staged_files7')),'tempfile')",
        "runAfter": {
          "If_CI_TRANSCRIPTION_true-Analyse": [
            "SUCCEEDED"
          ]
        }
      },
      "staged_files16": {
        "type": "Compose",
        "inputs": "@removeProperty(if(equals(outputs('config')?['redact']['CI_REDACT'],true),union(outputs('staged_files11'),outputs('staged_files12'),outputs('staged_files13'),outputs('staged_files14'),outputs('staged_files15')),outputs('staged_files11')),'tempfile')",
        "runAfter": {
          "If-CI_REDACT-true": [
            "SUCCEEDED"
          ]
        }
      },
      "staged_files7": {
        "type": "Compose",
        "inputs": "@if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('staged_files6'),outputs('staged_transcript_obj')),outputs('staged_files6'))",
        "runAfter": {
          "orchestrate_flow-If-Audio-Video-Chat-Transcript": [
            "SUCCEEDED"
          ]
        }
      },
      "staged_media_obj": {
        "type": "Compose",
        "inputs": {
          "bucket": "@outputs('CopyBlobToStagingContainer')?['body']['containerName']",
          "generation": "@json(outputs('CopyBlobToStagingContainer')?['body']['eTag'])",
          "object": "@outputs('CopyBlobToStagingContainer')?['body']['name']",
          "uploaded_at": "@outputs('CopyBlobToStagingContainer')?['body']['creationTime']"
        },
        "runAfter": {
          "CopyBlobToStagingContainer": [
            "SUCCEEDED"
          ]
        }
      },
      "staging_config": {
        "type": "Compose",
        "inputs": {
          "bucket_name": "@outputs('buckets')?['staging']",
          "file_prefix": "@parameters('INIT-staging_config')?['file_prefix']",
          "folder_path": "@body('CallWFConfigure')?['staging_folder_path']"
        },
        "runAfter": {
          "context1": [
            "SUCCEEDED"
          ]
        }
      },
      "tempfile": {
        "type": "Compose",
        "inputs": {
          "tempfile": ""
        },
        "runAfter": {
          "staged_media_obj": [
            "SUCCEEDED"
          ]
        }
      },
      "tempfilelistarray": {
        "type": "Compose",
        "inputs": {},
        "runAfter": {
          "working_files15": [
            "SUCCEEDED"
          ]
        }
      },
      "working": {
        "type": "Compose",
        "inputs": "@outputs('working_files15')",
        "runAfter": {
          "content": [
            "SUCCEEDED"
          ]
        }
      },
      "working_files": {
        "type": "Compose",
        "inputs": "@removeProperty(union(outputs('ifaudiotype'),outputs('ifvideotype'),outputs('iftranscripttype')),'tempfile')",
        "runAfter": {
          "IfTypeAudioVideoTranscript": [
            "SUCCEEDED"
          ]
        }
      },
      "working_files10": {
        "type": "Compose",
        "inputs": "@removeProperty(if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('working_files6'),outputs('working_files7'),outputs('working_files8'),outputs('working_files9')),outputs('working_files6')),'tempfile')",
        "runAfter": {
          "staged_files11": [
            "SUCCEEDED"
          ]
        }
      },
      "working_files15": {
        "type": "Compose",
        "inputs": "@removeProperty(if(equals(outputs('config')?['redact']['CI_REDACT'],true),union(outputs('working_files10'),outputs('working_files11'),outputs('working_files12'),outputs('working_files13'),outputs('working_files14')),outputs('working_files10')),'tempfile')",
        "runAfter": {
          "staged_files16": [
            "SUCCEEDED"
          ]
        }
      },
      "working_files6": {
        "type": "Compose",
        "inputs": "@if(equals(outputs('config')?['transcribe_media']['CI_TRANSCRIPTION'],true),union(outputs('working_files5'),outputs('staged_transcript_obj')),outputs('working_files5'))",
        "runAfter": {
          "staged_files7": [
            "SUCCEEDED"
          ]
        }
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "StartLandingContainer": {
        "type": "Request",
        "kind": "Http"
      }
    }
  },
  "kind": "Stateful"
}